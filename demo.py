
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import load_model  # S·ª≠ d·ª•ng keras ƒë·ªôc l·∫≠p
from sklearn.preprocessing import MinMaxScaler
import yfinance as yf
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings("ignore")

# Load model t·ª´ file .keras
@st.cache_resource
def load_cnn_model():
    model = load_model("model_stock.keras")
    scaler = MinMaxScaler()
    return model, scaler

# D·ª± ƒëo√°n theo ki·ªÉu autoregressive
def predict_with_cnn(model, context, prediction_steps, scaler):
    preds = []
    context = list(context.copy())

    for _ in range(prediction_steps):
        input_seq = np.array(context[-60:]).reshape(1, 60, 1)
        pred = model.predict(input_seq, verbose=0)[0][0]
        preds.append(pred)
        context.append(pred)

    preds_array = np.array(preds).reshape(-1, 1)
    return scaler.inverse_transform(preds_array).flatten()

# Streamlit UI
st.set_page_config(page_title="Stock Price Predictor (CNN)", layout="wide")
st.title("üìà D·ª± ƒëo√°n gi√° c·ªï phi·∫øu v·ªõi m√¥ h√¨nh 1D CNN")

with st.sidebar:
    st.header("Th√¥ng s·ªë ƒë·∫ßu v√†o")
    ticker = st.text_input("M√£ c·ªï phi·∫øu", "AAPL").upper()
    end_date = st.date_input("Ng√†y k·∫øt th√∫c", datetime.now())
    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", end_date - timedelta(days=365))
    prediction_days = st.slider("S·ªë ng√†y d·ª± ƒëo√°n", 1, 30, 7)
    st.markdown("---")

try:
    df = yf.download(ticker, start=start_date, end=end_date, progress=False)

    if df.empty:
        st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y!")
        st.stop()

    prices = df['Close'].values.astype(float)
    dates = df.index

    model, scaler = load_cnn_model()
    scaler.fit(prices.reshape(-1, 1))

    scaled_prices = scaler.transform(prices.reshape(-1, 1)).flatten()
    context = scaled_prices[-60:]  # L·∫•y 60 gi√° tr·ªã g·∫ßn nh·∫•t

    preds = predict_with_cnn(model, context, prediction_days, scaler)

    last_date = dates[-1]
    pred_dates = [last_date + timedelta(days=i) for i in range(1, prediction_days + 1)]

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(dates[-60:], prices[-60:], label='Gi√° th·ª±c t·∫ø', color='blue')
    ax.plot(pred_dates, preds, label='D·ª± ƒëo√°n', color='red', linestyle='--')
    ax.axvline(last_date, color='gray', linestyle=':')
    ax.set_title(f"D·ª± ƒëo√°n gi√° c·ªï phi·∫øu {ticker} ({prediction_days} ng√†y)")
    ax.set_xlabel("Ng√†y")
    ax.set_ylabel("Gi√° ($)")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu d·ª± ƒëo√°n
    st.subheader("Chi ti·∫øt d·ª± ƒëo√°n")
    pred_df = pd.DataFrame({
        "Ng√†y": pred_dates,
        "Gi√° d·ª± ƒëo√°n": preds,
        "Thay ƒë·ªïi h√†ng ng√†y (%)": np.concatenate([[0], np.diff(preds)/preds[:-1]*100])
    })
    st.dataframe(pred_df.style.format({
        "Gi√° d·ª± ƒëo√°n": "${:.2f}",
        "Thay ƒë·ªïi h√†ng ng√†y (%)": "{:.2f}%"
    }))

except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
